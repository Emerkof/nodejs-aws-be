service: product-service

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  stage: dev

  environment:
    SNS_PRODUCT_CREATED_TOPIC_ARN:
      Ref: SNSProductCreatedTopic

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'sns:Publish'
      Resource:
        Ref: SNSProductCreatedTopic

plugins:
  - serverless-plugin-webpack
  - serverless-dotenv-plugin

custom:
  webpack:
    config: ../webpack.config.js
    keepOutputDirectory: true


resources:
  Outputs:
    SQSProductQueueArn:
      Value:
        Fn::GetAtt: [ SQSProductQueue, Arn ]
    SQSProductQueueUrl:
      Value:
        Ref: SQSProductQueue
  Resources:
    SNSProductCreatedTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${env:SNS_PRODUCT_CREATED_TOPIC_NAME}
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_PRODUCT_CREATED_TOPIC_ENDPOINT}
        Protocol: email
        TopicArn:
          Ref: SNSProductCreatedTopic
    SQSProductQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${env:SQS_PRODUCT_QUEUE_NAME}

functions:
  catalogBatchProcess:
    handler: handlers/catalog-batch-process.createProductBatch
    events:
        - sqs:
            batchSize: 5
            arn:
              Fn::GetAtt:
                - SQSProductQueue
                - Arn
  createProduct:
    handler: handlers/create-product.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true
          request:
            schema:
              application/json: ${file(./validation-schemas/product/create.json)}
  getProductsById:
    handler: handlers/get-product.getProductsById
    events:
      - http:
          path: products/{id}
          method: get
          cors: true
  getProductsList:
    handler: handlers/list-products.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true
